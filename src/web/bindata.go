// Code generated by go-bindata.
// sources:
// templates/html_pageRoot.html
// templates/trivago-folder.ico
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtml_pagerootHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x31\x53\xf3\x30\x0c\xdd\xf3\x2b\xf4\xf9\x3e\x16\xee\x5a\x97\x8d\x4b\x1d\x2f\xc0\xc6\x41\x07\x16\x46\x35\x56\x9b\x40\x6a\xf7\x6c\x71\xa5\xd7\xeb\x7f\x47\x76\x52\x8e\x81\x81\x49\xc9\x7b\x7a\x4f\x4f\xb2\xf9\x77\xff\x7c\xf7\xf2\xba\x7a\x80\x8e\x77\x83\xad\x4c\x2e\x30\xa0\xdf\x36\x8a\xbc\xca\x00\xa1\x93\xb2\x23\x46\x68\x3b\x8c\x89\xb8\x51\x1f\xbc\x99\xdd\x66\x96\x7b\x1e\xc8\x3e\xe2\x7a\x08\x5b\x98\xc1\x2a\x86\x37\x6a\x39\x19\x3d\x12\x95\x49\x7c\xcc\x95\xa5\x83\xe0\x54\x01\x1c\x7a\xc7\x5d\x7d\xb3\x58\x5c\x2d\xab\x73\x55\xcd\x47\x06\x0b\xe7\xfa\xb4\x1f\xf0\x58\x8b\x5b\xfb\xbe\x14\x80\xe9\x93\x67\x8e\xda\x10\x91\xfb\xe0\x6b\x1f\x3c\x65\x99\xd1\x93\xaf\xd1\x53\xbe\x75\x70\xc7\x9c\xa7\xb8\xb5\x03\xa6\xd4\xa8\xf2\x23\x29\x01\x0c\x8f\x6d\x00\xe5\xdb\x3e\xe1\x8e\x24\x63\x57\x38\xfd\x4d\x1a\x8e\x97\x1e\x67\x0d\x42\x17\x69\xd3\x28\x9d\xba\x70\xd0\xe4\x39\xf6\x94\x94\xbd\x36\x1a\xad\x88\x8a\xe2\x74\x82\x28\xc7\x22\xf8\xbf\x1f\x57\x87\xba\x81\x39\x9c\xcf\x7f\x73\xd3\xa2\xbf\x28\xe7\x39\x94\x28\x95\xfd\x05\xfc\x39\x53\x6a\x9c\x66\x93\x77\x79\x96\x20\x79\xd5\x7c\x8e\xe9\x0e\x7a\x7c\xce\xaf\x00\x00\x00\xff\xff\x57\x1f\x3c\xc1\xdf\x01\x00\x00")

func templatesHtml_pagerootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtml_pagerootHtml,
		"templates/html_pageRoot.html",
	)
}

func templatesHtml_pagerootHtml() (*asset, error) {
	bytes, err := templatesHtml_pagerootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html_pageRoot.html", size: 479, mode: os.FileMode(436), modTime: time.Unix(1459277752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTrivagoFolderIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\xcd\x6b\x13\x5d\x14\xc6\x6f\x79\xdf\xcd\x5b\xfa\x42\x17\x5a\x4a\xb1\x22\xae\x04\x57\x8a\xa8\x1b\xfd\x03\x5c\x14\x71\x25\x7e\xac\xec\x42\x50\x11\x84\x82\xa8\x60\xd1\x2e\xba\xb1\x56\xa9\x66\x92\x49\x32\x33\xcd\x34\x09\x6d\x26\xe9\x64\x32\xf9\xa8\x69\x9a\x98\x26\x35\xb4\xa1\x2d\xa6\x95\x60\x3f\x26\x4d\x52\x4a\x69\xff\x86\xc7\x73\x27\x14\x8a\xe2\x0d\x3f\xce\xbd\x99\xf3\x3c\xe7\xdc\x33\xc3\x58\x1b\xfd\x3a\x3b\x78\x3c\xc3\x6e\xff\xc3\x58\x17\x63\xec\x1c\xd1\x49\x74\xb3\xd6\xff\x7f\x5b\xf3\xf3\xf3\x97\x5d\x2e\x57\x45\x10\x84\x75\x51\x14\xf7\x64\x59\x81\x43\x94\xe0\x10\x9c\x70\x0b\x1f\xe1\x72\x10\xa2\x00\x49\x26\x24\x2f\x3c\x1e\xcf\x9e\xd3\xe9\x5c\x27\xbe\x2b\x8a\x72\xd7\xe7\xf3\xdd\x74\x38\x1c\x20\x0f\x88\x2e\x11\x13\x8a\x80\x6f\x72\x3f\xf4\xc0\x67\xf4\x8b\x75\x0c\xf8\x2d\x0c\x0d\xaa\xb8\x7f\x27\x01\xaf\xe4\xb7\xf3\x38\x6e\xb7\x1b\xa4\x1b\x23\xbf\x7b\xe4\x03\x8e\x44\xb5\x33\x53\xef\x91\x7d\xde\x03\x5d\x1a\xc6\xa5\xd7\x3b\xb8\xf1\xce\xc2\xe3\x07\x1e\xf4\x9c\x90\xa1\xfa\xa2\xad\x3a\xa2\x68\xeb\xfd\x7e\x7f\x29\x18\x0c\x8e\x04\x02\x01\x50\xa4\x73\x10\x73\xa1\x0f\xc8\xbd\xec\x85\x39\x31\x82\x2b\x6f\x1a\xe8\x1b\xdd\xc1\xd3\x87\x12\x7a\xbb\x15\x4c\xa8\xba\xad\x3d\x42\x55\xd5\x02\xc5\xe1\x70\x38\x0c\x4d\xd3\x10\xd2\xc2\xc8\x47\xc6\x90\x7d\x71\x1a\xc9\xe0\x28\xae\xbe\xe5\xfa\x1a\x9e\x3d\x52\xd0\xd3\xa5\x20\x10\x30\xe1\xf5\x7a\xed\xda\x5c\x4f\x3d\x17\x48\x97\x8a\x46\xa3\x88\xc5\x62\x30\x8c\x18\x8a\x51\x27\xb2\xaf\xce\xe2\xcb\xe4\x27\x5c\x1b\xda\xc1\xad\x51\x0b\x03\x4f\x54\x5c\x38\x1f\x84\x4f\xd5\xe0\x1b\x1f\xa7\x39\x4a\xb6\x07\xcd\xb0\x60\x18\x46\xd9\x34\x4d\xc4\xe3\x71\x24\x93\x09\xa4\x67\x92\x98\x4b\x6a\x48\x98\x51\x18\x33\x5f\xa1\x27\x66\x31\x35\xa9\x23\xac\xc5\xc0\xef\x49\x77\xc6\x38\x79\xc8\xb2\xcc\xfb\xaf\x92\xfe\x7a\x28\x14\xaa\x73\x3d\xc7\xb4\x49\xc0\x34\x29\x9a\x31\x98\xd4\x57\xab\x37\x03\xbc\x4f\x5d\xd7\x6d\xb8\x0f\xe9\xfa\x68\xfe\xed\xb9\x5c\x2e\xbe\xbd\xbd\x8d\xad\xad\x2d\x6c\x6e\x6e\x62\x63\x63\xc3\x8e\x47\xfb\xe3\x67\x9e\xc3\x73\x17\x17\x17\x41\xba\x93\xd4\x4b\x7b\xb1\x58\x9c\x69\x34\x1a\xe0\xec\xee\xee\xa2\xd9\x6c\xda\xfb\x7a\xbd\x8e\x5a\xad\x06\xcb\xb2\x6c\xb8\x8e\xc3\xf7\xe5\x72\x19\xf9\x7c\xbe\x8b\xde\xdb\xbf\x0b\x0b\x0b\xc3\x3c\x6f\x7f\x7f\x1f\x07\x07\x07\x38\x3c\x3c\xb4\x75\x95\x4a\x65\x76\x75\x75\x75\x6e\x65\x65\x25\xc3\x59\x5e\x5e\x3e\x22\x5b\x2a\x95\xe2\x85\x42\xe1\x7f\xfe\x0d\xa7\xd3\xe9\x8b\xe4\x57\x59\x5b\x5b\xb3\x7e\xd0\xaa\x56\xab\xcd\xa5\xa5\xa5\x9f\x99\x4c\xe6\x54\x24\x12\xe9\x98\x9e\x9e\xfe\x83\x54\x2a\xf5\x1f\xd5\x6f\x1b\x6c\x63\x6c\x90\xb5\xf8\x7d\xd9\xcf\x8e\x91\x03\x63\xbf\x02\x00\x00\xff\xff\xe1\x84\xba\x7e\x6e\x03\x00\x00")

func templatesTrivagoFolderIcoBytes() ([]byte, error) {
	return bindataRead(
		_templatesTrivagoFolderIco,
		"templates/trivago-folder.ico",
	)
}

func templatesTrivagoFolderIco() (*asset, error) {
	bytes, err := templatesTrivagoFolderIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/trivago-folder.ico", size: 878, mode: os.FileMode(436), modTime: time.Unix(1458754120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html_pageRoot.html": templatesHtml_pagerootHtml,
	"templates/trivago-folder.ico": templatesTrivagoFolderIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html_pageRoot.html": &bintree{templatesHtml_pagerootHtml, map[string]*bintree{}},
		"trivago-folder.ico": &bintree{templatesTrivagoFolderIco, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
